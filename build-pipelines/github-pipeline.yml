trigger:
  branches:
    include:
    - '*'     # build all branches
  paths:
    exclude:
    - docs/*  # exclude the docs folder

variables:
  buildConfiguration: 'Release'
  releaseBranchName: main

schedules:
- cron: '0 3 * * *'  
  displayName: 'Deploy every day at 3 A.M.'
  branches:
    include:
    - main
  always: false

stages:
- stage: 'BuildAppStage'
  displayName: 'Build Application Stage'
  jobs:
  - job: 'BuildAppJob'
    displayName: 'Build App Job'
    pool:
      vmImage: 'ubuntu-22.04'
      demands:
      - npm

    variables:
      workingDirectory: '$(System.DefaultWorkingDirectory)/src'
      wwwrootDir: '$(workingDirectory)/Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        workingDir: '$(workingDirectory)'
        verbose: false

    - script: '$(workingDirectory)/node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'
      inputs:
        gulpFile: '$(workingDirectory)/gulpfile.js'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info as .txt file'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - template: templates/dotnet-build-template.yml
      parameters:
        buildConfiguration: 'Release'
        workingDirectory: $(workingDirectory)

    - template: templates/dotnet-build-template.yml
      parameters:
        buildConfiguration: 'Debug'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact - $(buildConfiguration): drop'
      condition: succeeded()    

- stage: 'DevDeploymentStage'
  displayName: 'Deploy Web App to Dev Environment'
  dependsOn: BuildAppStage
  condition: |
    and(
      succeeded(),
      eq( variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: WebEnvironmentDeploy
    pool:
      vmImage: 'ubuntu-20.04'

    environment: Development

    variables:
    - group: Release

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo "[buildConfiguration]: $(buildConfiguration)" > build-agent-paths.txt

          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: Dev WebSite'
            inputs:
              #Service Connection:
              azureSubscription: 'Tailspin-Automatic Service Principal'
              appName: '$(webAppName-dev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'      

- stage: 'TestDeploymentStage'  
  displayName: 'Deploy Web App to Test Environment'
  dependsOn: DevDeploymentStage
  #condition: eq( variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: TestingEnvironmentDeploy
    displayName: 'Test Environment Deployment Job'    
    environment: Testing
    pool:
      vmImage: 'ubuntu-20.04'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: Tests WebSite'  
            inputs:
              #Service Connection:
              azureSubscription: 'Tailspin-Automatic Service Principal'
              appName: '$(webAppName-test)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'StagingDeploymentStage'  
  displayName: 'Deploy Web App to Staging Environment'
  dependsOn: TestDeploymentStage
  jobs:
  - deployment: StagingEnvironmentDeploy
    displayName: 'Staging Environment Deployment Job'    
    environment: Staging
    pool:
      vmImage: 'ubuntu-20.04'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: Tests WebSite'  
            inputs:
              #Service Connection:
              azureSubscription: 'Tailspin-Automatic Service Principal'
              appName: '$(webAppName-staging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'              

